#!/bin/bash
# Run the builder. Locally installs prereqs needed by the builder.

PACKER_VERSION=0.5.2
PACKER_BASE_URL="https://dl.bintray.com/mitchellh/packer"

USAGE="usage: $(basename "$0") -s SOURCE -v VERSION [-b BRANCH] [-p PLATFORMS] [-u NAME=VALUE [...]]"

BASE=$(cd "$(dirname "$0")"; pwd)
SOURCES="$BASE/sources"
ARTIFACTS="$BASE/artifacts"
DATA="$BASE/.data"
CACHE="$DATA/cache"
TMP="$DATA/tmp"
PACKER="$DATA/packer"
LOG="$DATA/run.log"

log() {
	if [ $# -eq 0 ]; then
		cat >> "$LOG"
	else
		echo "$@" >> "$LOG"
	fi
}

stderr() {
	echo "$@" >&2
}

info() {
	stderr -e "\e[0;32m>>\e[0m" "$@"
	log ">>" "$@"
}

error() {
	stderr -e "\e[0;31m>>\e[0m" "$@"
	log ">>" "$@"
}

fatal() {
	error "$@"
	exit 1
}

init() {
	rm -f "$LOG"
	mkdir -p "$TMP" || fatal "Failed to create temporary directory."
	mkdir -p "$SOURCES" || fatal "Failed to create templates directory."
	mkdir -p "$ARTIFACTS" || fatal "Failed to create artifacts directory."
}

packer_version() {
	# Print the current packer version or an empty string if not installed
	if [ -x "$PACKER/packer" ]; then
		"$PACKER/packer" --version | sed 's/.*v//' 2> /dev/null
	fi
}

packer_install() {
	# Install packer if it's not present.
	PATH="$PACKER:$PATH"
	test "$(packer_version)" == "$PACKER_VERSION" && return 0

	info "Packer: Initializing directories."
	test -e "$PACKER" && rm -rf "$PACKER"
	mkdir -p "$PACKER" | log || fatal "Packer: Creation of '$PACKER' failed."
	local platform=$(uname -s | tr '[:upper:]' '[:lower:]')
	local url="$PACKER_BASE_URL/${PACKER_VERSION}_${platform}_amd64.zip"
	local dest="$TMP/packer_${PACKER_VERSION}_${platform}_amd64.zip"
	if ! [ -e "$dest" ]; then
		info "Packer: Downloading to '$dest'."
		wget -q "$url" -O "$dest" | log || fatal "Packer: Download from '$url' failed."
	else
		info "Packer: Using cached archive at '$dest'."
	fi
	info "Packer: Installing to '$PACKER'."
	cd "$PACKER" || fatal "Packer: Failed to cd to '$PACKER'."
	unzip -o "$dest" 2>&1 | log || fatal "Packer: Failed to extract archive."
}

git_is_url() {
	# Check if it's a git URL.
	echo "$1" | egrep -iq '^((ssh)|(git)|(http(s)?)|(ftp(s)?)|(rsync)://)|([^ ]+@)[a-z0-9._-]+(([:/][[a-z0-9._-])|$)'
}

git_name() {
	# Get the name of a repo from the URL.
	echo "$1" | sed -re 's|\.git(/)?$||g' -e 's|.*./||g'
}

git_clone() {
	# Clone or fetch changes to a repo.
	local repo="$1"
	local dest="$2"
	local branch="$3"
	test -z $branch && branch="master"

	if [ -e "${dest}/.git" ]; then
		# repo exists, update it
		info "Git: Fetching latest changes to ${branch}."
		cd "$dest" || fatal "Git: Failed to cd to destination."
		if ! git diff-index --quiet HEAD --; then
			git stash || error "Git: Failed to stash changes."
		fi
		git fetch -q origin || fatal "Git: Failed to fetch from origin."
	else
		# repo is missing, clone it
		info "Git: Cloning $repo into ${dest}."
		mkdir -p $(dirname "$dest") || fatal "Git: Failed to create destination."
		git clone -q "$repo" "$dest" || fatal "Git: Failed to clone repo."
		cd "$dest" || fatal "Git: Failed to cd to destination."
	fi

	git checkout -q "$branch" || fatal "Git: Failed to checkout ${branch}."
	git submodule -q update --init --recursive || fatal "Git: Failed to update submodules."
	cd - > /dev/null
}

usage() {
	test -n "$1" && stderr "$@"
	stderr "$USAGE"
	exit 1
}

help() {
	stderr "$USAGE"
	stderr ""
	stderr "Options:"
	stderr "  -s SOURCE         The image source to build from. Must be a valid directory"
	stderr "                    in templates or a remote git repository. Required."
	stderr "  -v VERSION        The version of the image to build. Required."
	stderr "  -b BRANCH         If source is a git repo check out this branch."
	stderr "  -p PLATFORMS      A comma separated list of platforms to build. Defaults to"
	stderr "					all platforms."
	stderr "  -u NAME=VALUE     User data to pass to Packer."
	stderr "  -h                This message."
}

options() {
	# Parse commandline options.
	REPO=
	SOURCE=
	VERSION=
	BRANCH=
	PLATFORMS=()
	USERDATA=()
	while getopts "s:v:p:u:h" OPTION; do
		case "$OPTION" in
		s)
			if git_is_url "$OPTARG"; then
				REPO="$OPTARG"
				SOURCE=$(git_name "$OPTARG")
			else
				SOURCE="$OPTARG"
			fi
			SOURCE_PATH="$SOURCES/$SOURCE"
			;;
		v)
			VERSION="$OPTARG"
			;;
		b)
			BRANCH="$BRANCH"
			;;
		p)
			for item in ${OPTARG/,/ }; do
				PLATFORMS+=("$item")
			done
			;;
		u)
			USERDATA+=("$OPTARG")
			;;
		h)
			help
			exit 0
			;;
		esac
	done
	shift $(($OPTIND - 1))

	test -n "$SOURCE" || usage "Image source is required."
	test -n "$VERSION" || usage "Version is required."
	test -z "$REPO" -a -n "$BRANCH" && usage "Branch option is only valid with git repos."
}

source_fetch() {
	# Grab sources from repo if git is being used.
	if [ -n "$REPO" ]; then
		info "$SOURCE: Fetching from '$REPO'."
		git_clone "$REPO" "$SOURCE_PATH" "$BRANCH" || fatal "$SOURCE: Fetch failed."
	fi
}

source_configure() {
	# Configure for the requested source.
	info "$SOURCE: Configuring."
	if [ -e "$BASE/sources.cfg" ]; then
		source "$BASE/sources.cfg" || fatal "$SOURCE: Failed to source sources.cfg."
	fi
	cd "$SOURCE_PATH" || fatal "$SOURCE: Could not cd to '$SOURCE_PATH'."
	if [ -e "configure" ]; then
		source ./configure || fatal "$SOURCE: Failed to source configure."
	fi
}

source_build() {
	# Build images for the source.
	info "$SOURCE: Building images: ${PLATFORMS[@]}."
	cd "$SOURCE_PATH" || fatal "$SOURCE: Could not cd to '$SOURCE_PATH'."
	test -f template.json || fatal "$SOURCE: Source is missing template.json."

	local packer_args=()
	if [ ${#PLATFORMS[@]} -ne 0 ]; then
		packer_args+=(-only "$(echo "${PLATFORMS[@]}" | sed 's/ /,/g')")
	fi

	for var in "${USERDATA[@]}"; do
		packer_args+=(-var "$var")
	done

	export ARTIFACTS VERSION
	PACKER_CACHE_DIR="$CACHE" packer build -force "${packer_args[@]}" template.json | tee -a "$LOG"
}

source_cleanup() {
	# Clean up after all the things.
	rmdir --ignore-fail-on-non-empty "$BASE/packer_cache" 2> /dev/null
}

init
options "$@"
source_fetch
source_configure
packer_install
source_build
source_cleanup
