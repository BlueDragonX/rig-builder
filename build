#!/bin/bash
# Run the builder. Locally installs prereqs needed by the builder.

PACKER_VERSION=0.5.2
PACKER_BASE_URL="https://dl.bintray.com/mitchellh/packer"

USAGE="usage: $(basename "$0") -s SOURCE -v VERSION [-p PLATFORMS] [-u NAME=VALUE [...]]"

HERE=$(cd "$(dirname "$0")"; pwd)
SOURCES="$HERE/sources"
ARTIFACTS="$HERE/artifacts"
DATA="$HERE/.data"
CACHE="$DATA/cache"
TMP="$DATA/tmp"
PACKER="$DATA/packer"
LOG="$DATA/run.log"

log() {
	if [ $# -eq 0 ]; then
		cat >> "$LOG"
	else
		echo "$@" >> "$LOG"
	fi
}

stderr() {
	echo "$@" >&2
}

info() {
	stderr -e "\e[0;32m>>\e[0m" "$@"
	log ">>" "$@"
}

error() {
	stderr -e "\e[0;31m>>\e[0m" "$@"
	log ">>" "$@"
}

fatal() {
	error "$@"
	exit 1
}

init() {
	rm -f "$LOG"
	mkdir -p "$TMP" || fatal "Failed to create temporary directory."
	mkdir -p "$SOURCES" || fatal "Failed to create templates directory."
	mkdir -p "$ARTIFACTS" || fatal "Failed to create artifacts directory."
}

packer_version() {
	# Print the current packer version or an empty string if not installed
	if [ -x "$PACKER/packer" ]; then
		"$PACKER/packer" --version | sed 's/.*v//' 2> /dev/null
	fi
}

packer_install() {
	# Install packer if it's not present.
	PATH="$PACKER:$PATH"
	test "$(packer_version)" == "$PACKER_VERSION" && return 0

	info "Packer: Initializing directories."
	test -e "$PACKER" && rm -rf "$PACKER"
	mkdir -p "$PACKER" | log || fatal "Packer: Creation of '$PACKER' failed."
	local platform=$(uname -s | tr '[:upper:]' '[:lower:]')
	local url="$PACKER_BASE_URL/${PACKER_VERSION}_${platform}_amd64.zip"
	local dest="$TMP/packer_${PACKER_VERSION}_${platform}_amd64.zip"
	if ! [ -e "$dest" ]; then
		info "Packer: Downloading to '$dest'."
		wget -q "$url" -O "$dest" | log || fatal "Packer: Download from '$url' failed."
	else
		info "Packer: Using cached archive at '$dest'."
	fi
	info "Packer: Installing to '$PACKER'."
	cd "$PACKER" || fatal "Packer: Failed to cd to '$PACKER'."
	unzip -o "$dest" 2>&1 | log || fatal "Packer: Failed to extract archive."
}

usage() {
	test -n "$1" && stderr "$@"
	stderr "$USAGE"
	exit 1
}

help() {
	stderr "$USAGE"
	stderr ""
	stderr "Options:"
	stderr "  -s SOURCE         The image to build. Must be a valid directory in templates."
	#stderr "  -s SOURCE         The image source to build from. Must be a valid directory"
	#stderr "                    in templates or a remote git repository. Required."
	stderr "  -v VERSION        The version of the image to build. Required."
	stderr "  -p PLATFORMS      A comma separated list of platforms to build. Defaults to"
	stderr "					all platforms."
	stderr "  -u NAME=VALUE     User data to pass to Packer."
	stderr "  -h                This message."
}

options() {
	# Parse commandline options.
	SOURCE=
	VERSION=
	PLATFORMS=
	USERDATA=()
	while getopts "s:v:p:u:h" OPTION; do
		case "$OPTION" in
		s)
			SOURCE="$OPTARG"
			;;
		v)
			VERSION="$OPTARG"
			;;
		p)
			PLATFORMS="$OPTARG"
			;;
		u)
			USERDATA+=("$OPTARG")
			;;
		h)
			help
			exit 0
			;;
		esac
	done
	shift $(($OPTIND - 1))

	test -n "$SOURCE" || usage "Image source is required."
	test -n "$VERSION" || usage "Version is required."
}

build_images() {
	# Build images using the configured options.
	local source_path="$SOURCES/$SOURCE"
	test -d "$source_path" || fatal "Image source '$SOURCE' not found."
	cd "$source_path" || fatal "Failed to cd to '$source_path'."
	test -f template.json || fatal "Image source '$SOURCE' is missing template.json."

	local only=()
	if [ -n "$PLATFORMS" ]; then
		only=(-only "$PLATFORMS")
	fi

	local vars=()
	vars+=(-var "version=$VERSION")
	vars+=(-var "artifacts=$ARTIFACTS")
	for var in "${USERDATA[@]}"; do
		vars+=(-var "$var")
	done

	PACKER_CACHE_DIR="$CACHE" packer build -force "${only[@]}" "${vars[@]}" template.json | tee -a "$LOG"
}

init
options "$@"
packer_install
build_images
